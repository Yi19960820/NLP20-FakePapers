Convolutional Neural Networks (CNNs) are highly accurate deep learning networks inspired by the mammalian visual cortex. A number of works explored the implementation of CNNs on FPGAs~ _cite_ to take advantage of their low-power, customizable and programmable fabric. While FPGA implementations show promise in efficiently computing CNNs, they lack the infrastructure available for both CPUs and GPUs. This makes FPGAs inaccessible to deep learning scientists. There are many frameworks for CNN implementations, most of which provide support for CPU, GPU or the option of both~ _cite_ . These frameworks allow the programmer to launch any CNN model, and contain comprehensive tests for both layer-based and system-based executions~ _cite_ . However, none of the prominent CNN frameworks provide support for FPGA implementations. As a result, to implement a CNN on the FPGA, the designer has to manually design the implementation for each model, as well as test for correctness and optimize for performance, essentially rebuilding from scratch, rather than taking advantage of existing work. CNNs are very computationally intensive with most of the computation in the convolution layers. The convolution layers require a large number of multiply-accumulate operations. The large computational complexity motivates efforts to reduce the number of required operations. One approach is to use the FFT for convolution because in the frequency domain, the convolution becomes multiplication of each transformed input with the corresponding transformed filter coefficients, resulting in a compute reduction and speedup ~ _cite_ . An alternative approach uses the Winograd minimal filtering algorithm to take advantage of the overlapping computations between adjacent convolution windows~ _cite_ . In this work we implement and optimize the Winograd algorithm on an FPGA within the Caffe framework~ _cite_ . This paper makes the following contributions: This work is organized as follows: Section~ _ref_ provides background information on CNNs and the Xilinx SDAccel OpenCL framework. Section~ _ref_ discusses the Winograd convolution algorithm and FPGA implementation. Section~ _ref_ details the features included in the FPGA Caffe framework and Section~ _ref_ shows the area utilization and performance results of the Winograd convolution engine within the FPGA Caffe framework. Section~ _ref_ reviews related work and compares this work to other recent FPGA implementations. Finally, Section~ _ref_ discusses future work related to the FPGA Caffe framework, and Section~ _ref_ concludes the paper.