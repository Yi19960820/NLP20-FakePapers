Visual object tracking is a very important task in computer vision in which an object of interest would be identified and located in the first frame of a video. The goal is to follow the object movement and scale in subsequent frames by applying the tracking algorithm, usually faster and more efficient then a general detection scheme. Because of the wide range of applications that include visual tracking (e.g. robotics and surveillance), tracking had the attention of the computer vision community for several years Correlation filters (CF) have used in tracking for several years in visual tracking due to their speed and efficient computations .Adding Kernels to these trackers produced state of the art Kernel Correlation Filter (KCF) that topped tracking benchmarks for several years. KCF utilizes the circulant structure of the data matrix of all possible shifts to achieve less computation and utilizes the Kernel substitution trick _cite_ Several versions and modifications of KCF came to tackle the problems it possessed like occlusion, boundary effect, scale, and rotation _cite_ _cite_ _cite_ _cite_ . Rotation being one of these problems that KCF suffers is itself an interesting problem (rotation detection) with wide range of applications like texture classification _cite_ . By the way KCF filter is constructed it assumes the object didn't rotate or change shape, this assumption cause the response of the filter to deteriorate and the detection would (as a result) drift away from the target position and cause drop of the performance. We propose here to reformulate the optimization objective to include a second filter that will learn a rotation descriptor for the target and utilize this information in the detection phase of KCF family tracker. We show that this extra information (the rotation from one frame to another) will enhance the performance of CF trackers with many of its variations, with potential of applying in trackers that utilize deep features and Siamese network as discussed in _cite_ . This rotation filter uses the circularity of the HOG feature that enable it to utilize the same computational efficiency of the KCF tracker (as we will show in section N) giving boost to the base performance with almost no additional computation time.