Most applications in document analysis require text recognition at page level, where only the raw image is available and no preliminary hand-made annotation can be used. Traditionally, this problem has mainly been addressed by separating the process into two distinct steps; namely the text line detection task, which is frequently proceeded by additional paragraph and word detection steps, and the text recognition task. In this work we propose a method, which couples these two steps tighter by unloading some of the burden of the difficult localization step to the recognition task. In particular, the localization step detects the starts of the text lines only. The problem of finding where to stop the recognition is solved by the recognizer itself. Numerous algorithms have been proposed for the text line localization. Some are used in a bottom-up approach by grouping sub-components like connected components or black pixels into lines. RLSA _cite_ uses morphological opening on black pixels to merge the components that belong to the same text line. Similarly, Shi et al. _cite_ resort to horizontal ellipsoidal steerable filters to blur the image and merge the components of the text line. In _cite_, gradients are accumulated and filtered. Louloudis et al. _cite_ employ a Hough algorithm on the connected component centers while Ryu et al. _cite_ cluster parts of the connected components according to heuristic based successive splits and merges. Other methods follow a top-down approach and split the pages into smaller parts. The XY-cut algorithm _cite_ looks for vertical and horizontal white spaces to successively split the pages in paragraphs, lines and words. Similarly, projection profile algorithms like Ouwayed et al. _cite_ are aimed at finding the horizontal whiter parts of a paragraph. This technique is extended to non-horizontal texts by methods like Nicolaou et al. _cite_ that dynamically finds a path between the text lines or by Tseng et al. _cite_ that use a Viterbi algorithm to minimize this path. Techniques like the ones proposed by Mehri et al. _cite_ or Chen et al. _cite_ classify pixels into text or non-text but need post-processing techniques to constitute text lines. These techniques usually work well on the homogeneous datasets they have been tuned for but need heavy engineering to perform well on heterogeneous datasets like the Maurdor dataset _cite_ . For this reason, Machine learning has proven to be efficient, in particular deep convolutional networks. Early work from Delakis et al. _cite_ classifies scene text image parts as text and non-text with a Convolutional Neural Network on a sliding window. In _cite_, paragraph images are split vertically using a recurrent neural network and CTC alignment. More recently, methods inspired from image object detection techniques like MultiBox _cite_, YOLO _cite_ or Single-Shot Detector (SSD) _cite_ have arisen. Moysset et al. _cite_ proposed a MultiBox based approach for direct text line bounding boxes detection. Similarly, Gupta et al. _cite_ and Liao et al. _cite_ use respectively YOLO based and SSD based approach for scene text detection. Moysset et al. _cite_ also propose the separate detection of bottom-left and top-right corners of line bounding boxes. The text recognition part is usually made with variations of Hidden Markov Models _cite_ or ND Long Short Term Memory (ND-LSTM) _cite_ neural networks. Finally, Bluche et al. _cite_ use a hard attention mechanism to directly perform full page text recognition without prior localization. The iterative algorithm finds the next attention point based on the sequence of seen glimpses modeled through the hidden state of a recurrent network. In this work, we address full page text recognition in two steps. First, a neural network detects where to start to recognize a text line, and a second network performs the text recognition and decides when to stop the process. More precisely, the former network detects the left sides of each text lines by predicting the value of the object position coordinates as a regression problem. This detection neural network system is detailed in Part _ref_ and the left-side strategy is explained in Part _ref_ . The latter network recognizes the text and predicts the end of the text of the line as described in Part _ref_ . The experimental setup is described in Part _ref_ and results are shown and analyzed in Part _ref_ .