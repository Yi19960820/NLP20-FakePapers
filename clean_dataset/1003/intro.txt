The aim of visual texture synthesis is to define a generative process that, from a given example texture, can generate arbitrarily many new samples of the same texture. Among the class of such algorithms, parametric texture models aim to uniquely describe each texture by a set of statistical measurements that are taken over the spatial extent of the image. Each image with the same spatial summary statistics should be perceived as the same texture. Consequently, synthesizing a texture corresponds to finding a new image that reproduces the summary statistics of the reference texture. Starting from Nth-order joint histograms of the pixels by Julesz _cite_, many different statistical measures have been proposed \cite [] {HeegerN, Portilla: N} . The quality of the synthesized textures is usually determined by human inspection; the synthesis is successful if a human observer cannot tell the reference texture from the synthesized ones. The current state of the art in parametric texture modeling _cite_ employs the hierarchical image representation in a deep N-layer convolutional network (in the following referred to as VGG network) _cite_ that was trained on object recognition in natural images. In this model textures are described by the raw correlations between feature activations in response to the texture image from a collection of network layers (see section _ref_ for details) . Two aspects of the model seemed critical for texture synthesis: the hierarchical multi-layer representation of the textures, and the supervised training of the feature spaces. Here we show that neither aspect is imperative for texture modeling and that in fact a single convolutional layer with random features can often synthesize textures that rival, and sometimes even surpass, the perceptual quality of Gatys et al. _cite_ . This is in contrast to Gatys et al. _cite_ who reported that networks with random weights fail to generate perceptually interesting images. We suggest that this discrepancy originates from a more elaborate tuning of the optimization procedure (see section _ref_) .