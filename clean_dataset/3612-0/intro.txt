Object detection is a computer vision area that focuses on identifying the position of multiple objects in an image. Traditionally, object detection methods have been based on two main techniques known as sliding windows and image pyramids; and, they have been successfully applied to solve problems such as face detection~ _cite_ or pedestrian detection~ _cite_ . However, those approaches are slow, lack the notion of aspect ratio and are error prone~ _cite_ . These problems have been recently overcome using deep learning techniques. Deep learning has impacted almost every area of computer vision, and object detection is no exception. Intuitively, in deep learning-based object detectors, we input an image to a network and obtain, as output, the bounding boxes (that is, the minimum rectangle containing the objects) and the class labels. Deep learning-based object detectors can be split into two groups: one-stage and two-stage object detectors. The former divide the image into regions, that are passed into a convolutional neural network, and then the prediction is obtained---these detectors include techniques such as SSD~ _cite_ or YOLO~ _cite_ . The two-stage object detectors employ region proposal methods to obtain interesting regions in the image, that are later processed to obtain the prediction---these methods include the R-CNN family of object detectors~ _cite_ . Usually, one-stage object detectors are faster but less precise than two-stage object detectors; however, the one-stage object detector YOLO has recently achieved a similar accuracy to the one obtained by two-stage object detectors, but keeping fast processing~ _cite_ . Due to this fact, the YOLO object detector has been applied in problems that require real time processing but also need a high accuracy, like real time detection of lung modules~ _cite_ or the detection of small objects in satellite imagery~ _cite_ . The YOLO object detector is provided as part of the Darknet framework~ _cite_ ; but, as almost every deep learning tool, it has a steep learning curve and adapting it to work in a particular problem might be a challenge for several users---apart from understanding the underlying algorithm of YOLO (a step that might not be necessary to create an object detection model with YOLO), using YOLO might be a challenge since it requires, among others, the installation of several libraries, the modification of several files and the usage of a concrete file structure. Therefore, even if this technique might be helpful for several fields (ranging from biomedicine and agriculture to security), users from those fields are not able to take advantage of it. To solve this problem, we have developed an assistant, in the form of a suite of Jupyter notebooks, that guides non-expert users through all the steps that are necessary in an object detection project using YOLO. As we explain in Section~ _ref_, there are several steps that are required to create a deep learning-based object detector; but, thanks to our assistant, see Section~ _ref_, they are reduced to fixing a few parameters, and the rest of the process is conducted automatically by our tool. To prove the suitability of our approach, we have employed the assistant to create an stomata detector for plant images, see Section~ _ref_ . The paper ends with some conclusions and further work.