The problem of automatically analyzing the facial attributes received increasing attention recently _cite_ . Face attributes may potentially benefit a number of real-world applications, such as face alignment _cite_, head pose estimation _cite_ and face verification _cite_ . Analyzing facial attributes still remains challenging in real-world scenarios. For example, most existing works _cite_ predict the facial attributes on well-cropped face images. In an extension to real-world scenarios, those works have to utilize the face detector to localize the bounding box of human faces before facial attribute analysis. Such a pipeline of face detection followed by facial attribute prediction is nevertheless undesirable in real-world facial attribute prediction due to two reasons. Firstly, with the preprocessing of face detector, the capability of facial attribute prediction has to heavily relies on the results of face detection. Unfortunately in an uncontrolled setting _cite_, the face is likely to have large out-of-plane tilting, occlusion and illumination variations, which may affect the algorithms of face detection and facial attribute analysis simultaneously. For example, the Viola-Jones face detector _cite_ works well for near-frontal faces, but less effective for faces in the pose far from frontal views. Second, face detection is heterogeneous but subtly correlated with facial attribute prediction, and vice versa _cite_ . Efficiently and effectively exploiting this correlation may help in both detecting faces and predicting facial attributes. We propose an end-to-end deep architecture to learning to detect faces and analyze facial attributes. Essentially, the two tasks share the same bottom layers (feature map in Fig. _ref_) in the architecture to alleviate the problems of face variations aforementioned. For instance, one face region of one image is failed to be detected as a face due to the partial occlusion, and yet the network can detect the existence of some facial attributes such as ``eyeglasses'', and ``smiling''. The face region can still be used to optimize our network and in turn help supervise the learning of the face detection part, to improve the performance of face detection part. In this work, the deep learning architecture is proposed for both face detection and facial attribute analysis. The network structure is illustrated in Fig. _ref_ . Given an entire image, our architecture will firstly pass the image with convolutional layers () and max pooling layers to produce the feature map for face region proposals. The region of interest (RoI) pooling layer and face region proposal layer are two layers introduced to facilitate the jointly learning of our architecture. A region of interest (RoI) pooling layer pools each face proposal on the feature map into a fixed-length feature vector which is further processed by two fully connected layers (and) . Built on the layer, each individual task of facial attribute analysis and face detection are jointly optimized. By virtue of the face detection subnet, our architecture can directly predict the facial attributes from the whole images, rather than using the well-cropped images as previous work _cite_ . Extensive experiments on benchmark CelebA _cite_ and LFWA _cite_ datasets demonstrate that our method outperforms state-of-the-art alternatives. \noindent Contribution . Our main contribution is to propose a novel deep architecture of jointly learning of face detection and facial attribute tasks, which is capable of utilizing both tasks to better optimize the shared network and thus improve the performance of both tasks. Two layers region of interest (RoI) pooling layer and face region proposal layer are introduced to enable learning these two tasks simultaneously. More importantly, we can predict the facial attributes in the wild and the input images do not need to be cropped and aligned as the standard practice in _cite_ . Finally, our joint deep architecture achieves state-of-the-art result on the biggest benchmark dataset for facial attribute analysis CelebA dataset _cite_ and LFWA _cite_ datasets.