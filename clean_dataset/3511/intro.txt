Given an RGB image of a known ND scene, our goal is to infer the N degree of freedom pose of the camera-a task known as camera localization. To do this, current state-of-the-art methods _cite_, employ a two-stage pipeline. In the first stage, for each pixel in the image, a continuous ND coordinate of the scene is regressed. These are called scene coordinates and uniquely identify each part of the scene (Fig.~ _ref_) . In the second stage, sparse sets of four scene coordinates are sampled and fed into a RANSAC-based optimizer which estimates the final camera pose. In this work, we analyze the first stage of this pipeline, the dense regression of scene coordinates. State-of-the-art methods have typically employed regression Random Forests (RFs) to accomplish this task _cite_ . The RFs have the advantage of being both memory and test-time efficient, two important features when considering camera localization in real-time navigation and mobile robotics. In this work, we analyze equivalently-efficient and non-efficient neural network (NN)-based architectures to accomplish the task of scene coordinate regression for camera localization. Our choices of architectures are inspired by the work of _cite_ who propose a method for transforming a binary decision tree into a two-hidden-layer NN. We utilise this tree-to-NN mapping by taking a RF trained for ND-to-ND scene coordinate prediction in a known scene _cite_ and mapping each of its trees to an equivalent two-layer NN. We collectively refer to this ensemble of NNs as a ForestNet. We fine-tune the ForestNet on a subset of the data that was used to train the original RF. At test-time, we obtain scene coordinate predictions from the ForestNet and feed them into a RANSAC-based optimizer to extract the ND camera pose. This pipeline is illustrated in Fig.~ _ref_ . The motivation for exploring NN architectures based on this RF-to-NN mapping is two-fold. Firstly, the mapping constructs a NN that is derived from a learned RF: the tree topologies define the active connections in the network and the trees' learned parameters specify the initialization of all network weights. This makes it possible to preserve the tree topologies when training the ForestNet. The optimized ForestNet can thus be made efficient again by mapping back to the fast and memory-compact RF version of itself as done in _cite_ . With this ability, we explore variants of the ForestNets where we allow different parts of the network to be optimized, in some cases retaining the ability to map-back and in other cases not. The second motivation for exploring this mapping is that it allows for the construction of an ensemble of NNs. This ensemble is fully differentiable making it amenable to traditional NN training paradigms, unlike traditional RFs. Further, we can apply a robust averaging to the ensemble's outputs. In particular, we introduce a variant of the ND geometric median and implement it as a fully differentiable NN module. We observe that by appending this module onto the ForestNet, either post-hoc or integrated into the end-to-end training of the network, we improve on the accuracy of the scene coordinate predictions by N \% and N \%, respectively, over a ForestNet without averaging. In addition to this, we compare a ForestNet to a deep Convolutional NN (CNN) trained specifically for dense scene coordinate regression. The CNN achieves better scene coordinate predictions but under-performs the RFs and ForestNets in terms of final ND camera pose accuracy. Importantly, this deep CNN cannot be mapped to a RF, and hence cannot enjoy their fast test-time speeds and lightweight memory requirements. All these results shed light on the best approaches to use for other continuous regression tasks. Based on the above, our key contributions are as follows: