Detection of PCB components is an important step for automated PCB inspection and hardware reverse engineering. Traditionally, this step is carried out by a human expert to first locate and draw the bounding boxes of all components, and then identify the component types. However, it is extremely tedious and time consuming for a human expert to do such work. A PCB typically contains hundreds of components, and the identification of component types requires in-depth knowledge of electronic components. Figure.~ _ref_ gives an example of a labeled PCB image. Based on our experience, it takes one to two days for a human expert to label a single PCB image. Thus, it would be extremely helpful if we can automate this tedious process. Fine-tuning state-of-the-art object detection networks~ _cite_ is an intriguing option for PCB component detection. However, it performs poorly due to following reasons: Data Availability: It is expensive to label a PCB image. This is also one of the objectives of this paper: to greatly reduce human efforts in labeling PCB components. Due to this expensive process, it is difficult to scale up a training dataset similar to other tasks (e.g. MSCOCO~ _cite_ or PASCAL~ _cite_), especially as online data tends to have lower resolution than required or are taken from a side view, and hence manual image captures are required. For these same reasons, it is also difficult to obtain a large amount of unlabeled PCB images. Therefore, it is difficult to leverage large-scale unsupervised or semi-supervised learning methods to improve the accuracy. Data Distribution and Domain Shift: The distribution of component types is highly unbalanced. For example, on a PCB we may have thousands of resistors and capacitors, while we may only have hundreds of integrated chips (IC) and only a few switches or some rare types such as an emi-filter or display. Please refer to supplementary materials for a more detailed figure of type distribution. Furthermore, the data distribution also exhibits high intra-class variance and low inter-class variance for certain types of components. In Figure.~ _ref_, we show that resistors, capacitors, ferrite beads, etc. share similar visual appearance (low inter-class variance), while there are various kinds of connectors that all look very different (high intra-class variance) . Using hand-engineered features is another appealing strategy for a well-defined application. There are a few attempts for PCB component detection that are based on traditional image processing methods~ _cite_ before the deep learning era. However, many other factors such as image resolution, lighting condition, etc. limit the applicability of above methods. In this work we aim to address the problem of detecting a broad set of component types on a variety of PCBs. Furthermore, to the best of our knowledge, our proposed method is one of the earliest attempts to apply deep learning based method for such a task. In this paper, we develop a dataset consisting of a small set of annotated boards across many different PCB types and varieties. To address the challenges arising from data availability and distribution, we propose a three stages object detection pipeline that combines traditional region-based networks ~ _cite_ with low-shot similarity learning methods~ _cite_ . Further, in order to fully exploit the structure inherent in the problem of PCB component detection, we design a new graph network block inspired by recent work in such networks. The key idea is that we are able to condition our classifier on the biases in how boards are laid out and propagation of a few labels on components on the test board. Our method therefore contains the following components: Region Proposal Network (RPN): In this stage, we train a class-agnostic RPN~ _cite_ to propose potential component locations. By doing so, the detection network does not have to deal with the data issues mentioned earlier, but simply shift the burden to the next proposal classification stage, in which some low-shot classification methods can be applied more easily. Similarity Prediction Network (SPN): If we have high-quality proposals from the first stage, then the second stage becomes a classification problem. However, it is still a nontrivial task due to the data issues. As a result, we borrow methods from low-shot learning to learn a good feature embedding for similarity prediction~ _cite_ . The network in this stage will compare each proposal to some component templates cropped from the same test board when a few components are labeled (semi-supervised learning) . The proposals are then classified as the most similar template. Graph Network (GN): We also observe the fact that components on the same board tend to share similar visual appearance and that there is structure in how the boards are laid out. Therefore, we hypothesize that we can exploit such data dependence on each board to further improve classification accuracy. Thus, we propose a novel GN block~ _cite_ to capture the data dependency and further refine the features. The proposed GN block helps the information propagate across nodes and edges on the graph representation of a board, and show improved results over existing non-local graph networks (NLNN) _cite_ . In sum, we make the following contributions: In the rest of this paper, we briefly review relevant works in Section N. In Section N, we propose our model and introduce each part in detail. In Section N, we provide implementation details, and conduct extensive experiments and ablation study for our proposed model. We discuss the reasons for the failure cases in Section N, and conclude with areas for future work in Section N.